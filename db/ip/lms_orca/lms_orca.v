// lms_orca.v

// Generated using ACDS version 15.1 193

`timescale 1 ps / 1 ps
module lms_orca (
		input  wire        clk_clk,                                     //                                  clk.clk
		output wire        controlled_reset_external_connection_export, // controlled_reset_external_connection.export
		input  wire [31:0] exfifo_if_d_export,                          //                          exfifo_if_d.export
		output wire        exfifo_if_rd_export,                         //                         exfifo_if_rd.export
		input  wire        exfifo_if_rdempty_export,                    //                    exfifo_if_rdempty.export
		output wire [31:0] exfifo_of_d_export,                          //                          exfifo_of_d.export
		output wire        exfifo_of_wr_export,                         //                         exfifo_of_wr.export
		input  wire        exfifo_of_wrfull_export,                     //                     exfifo_of_wrfull.export
		output wire        exfifo_rst_export,                           //                           exfifo_rst.export
		output wire        i2c_opencores_0_interrupt_sender_irq,        //     i2c_opencores_0_interrupt_sender.irq
		input  wire        in_reset_reset_n,                            //                             in_reset.reset_n
		output wire [7:0]  leds_external_connection_export,             //             leds_external_connection.export
		output wire [3:0]  lms_ctr_gpio_external_connection_export,     //     lms_ctr_gpio_external_connection.export
		inout  wire        scl_exp_export,                              //                              scl_exp.export
		inout  wire        sda_exp_export,                              //                              sda_exp.export
		input  wire        spi_1_dac_external_MISO,                     //                   spi_1_dac_external.MISO
		output wire        spi_1_dac_external_MOSI,                     //                                     .MOSI
		output wire        spi_1_dac_external_SCLK,                     //                                     .SCLK
		output wire [1:0]  spi_1_dac_external_SS_n,                     //                                     .SS_n
		output wire        spi_1_dac_irq_irq,                           //                        spi_1_dac_irq.irq
		input  wire        spi_lms_external_MISO,                       //                     spi_lms_external.MISO
		output wire        spi_lms_external_MOSI,                       //                                     .MOSI
		output wire        spi_lms_external_SCLK,                       //                                     .SCLK
		output wire [4:0]  spi_lms_external_SS_n,                       //                                     .SS_n
		output wire        spi_lms_irq_irq,                             //                          spi_lms_irq.irq
		input  wire [7:0]  switch_external_connection_export,           //           switch_external_connection.export
		input  wire [0:0]  vectorblox_orca_0_global_interrupts_export   //  vectorblox_orca_0_global_interrupts.export
	);

	wire  [31:0] vectorblox_orca_0_data_readdata;                              // mm_interconnect_0:vectorblox_orca_0_data_readdata -> vectorblox_orca_0:avm_data_readdata
	wire         vectorblox_orca_0_data_waitrequest;                           // mm_interconnect_0:vectorblox_orca_0_data_waitrequest -> vectorblox_orca_0:avm_data_waitrequest
	wire  [31:0] vectorblox_orca_0_data_address;                               // vectorblox_orca_0:avm_data_address -> mm_interconnect_0:vectorblox_orca_0_data_address
	wire   [3:0] vectorblox_orca_0_data_byteenable;                            // vectorblox_orca_0:avm_data_byteenable -> mm_interconnect_0:vectorblox_orca_0_data_byteenable
	wire         vectorblox_orca_0_data_read;                                  // vectorblox_orca_0:avm_data_read -> mm_interconnect_0:vectorblox_orca_0_data_read
	wire         vectorblox_orca_0_data_readdatavalid;                         // mm_interconnect_0:vectorblox_orca_0_data_readdatavalid -> vectorblox_orca_0:avm_data_readdatavalid
	wire         vectorblox_orca_0_data_write;                                 // vectorblox_orca_0:avm_data_write -> mm_interconnect_0:vectorblox_orca_0_data_write
	wire  [31:0] vectorblox_orca_0_data_writedata;                             // vectorblox_orca_0:avm_data_writedata -> mm_interconnect_0:vectorblox_orca_0_data_writedata
	wire  [31:0] vectorblox_orca_0_instruction_readdata;                       // mm_interconnect_0:vectorblox_orca_0_instruction_readdata -> vectorblox_orca_0:avm_instruction_readdata
	wire         vectorblox_orca_0_instruction_waitrequest;                    // mm_interconnect_0:vectorblox_orca_0_instruction_waitrequest -> vectorblox_orca_0:avm_instruction_waitrequest
	wire  [31:0] vectorblox_orca_0_instruction_address;                        // vectorblox_orca_0:avm_instruction_address -> mm_interconnect_0:vectorblox_orca_0_instruction_address
	wire         vectorblox_orca_0_instruction_read;                           // vectorblox_orca_0:avm_instruction_read -> mm_interconnect_0:vectorblox_orca_0_instruction_read
	wire         vectorblox_orca_0_instruction_readdatavalid;                  // mm_interconnect_0:vectorblox_orca_0_instruction_readdatavalid -> vectorblox_orca_0:avm_instruction_readdatavalid
	wire         mm_interconnect_0_i2c_opencores_0_avalon_slave_0_chipselect;  // mm_interconnect_0:i2c_opencores_0_avalon_slave_0_chipselect -> i2c_opencores_0:wb_stb_i
	wire   [7:0] mm_interconnect_0_i2c_opencores_0_avalon_slave_0_readdata;    // i2c_opencores_0:wb_dat_o -> mm_interconnect_0:i2c_opencores_0_avalon_slave_0_readdata
	wire         mm_interconnect_0_i2c_opencores_0_avalon_slave_0_waitrequest; // i2c_opencores_0:wb_ack_o -> mm_interconnect_0:i2c_opencores_0_avalon_slave_0_waitrequest
	wire   [2:0] mm_interconnect_0_i2c_opencores_0_avalon_slave_0_address;     // mm_interconnect_0:i2c_opencores_0_avalon_slave_0_address -> i2c_opencores_0:wb_adr_i
	wire         mm_interconnect_0_i2c_opencores_0_avalon_slave_0_write;       // mm_interconnect_0:i2c_opencores_0_avalon_slave_0_write -> i2c_opencores_0:wb_we_i
	wire   [7:0] mm_interconnect_0_i2c_opencores_0_avalon_slave_0_writedata;   // mm_interconnect_0:i2c_opencores_0_avalon_slave_0_writedata -> i2c_opencores_0:wb_dat_i
	wire         mm_interconnect_0_av_fifo_int_0_avalon_slave_0_chipselect;    // mm_interconnect_0:Av_FIFO_Int_0_avalon_slave_0_chipselect -> Av_FIFO_Int_0:chipselect
	wire  [31:0] mm_interconnect_0_av_fifo_int_0_avalon_slave_0_readdata;      // Av_FIFO_Int_0:readdata -> mm_interconnect_0:Av_FIFO_Int_0_avalon_slave_0_readdata
	wire   [1:0] mm_interconnect_0_av_fifo_int_0_avalon_slave_0_address;       // mm_interconnect_0:Av_FIFO_Int_0_avalon_slave_0_address -> Av_FIFO_Int_0:address
	wire         mm_interconnect_0_av_fifo_int_0_avalon_slave_0_read;          // mm_interconnect_0:Av_FIFO_Int_0_avalon_slave_0_read -> Av_FIFO_Int_0:read
	wire         mm_interconnect_0_av_fifo_int_0_avalon_slave_0_write;         // mm_interconnect_0:Av_FIFO_Int_0_avalon_slave_0_write -> Av_FIFO_Int_0:write
	wire  [31:0] mm_interconnect_0_av_fifo_int_0_avalon_slave_0_writedata;     // mm_interconnect_0:Av_FIFO_Int_0_avalon_slave_0_writedata -> Av_FIFO_Int_0:writedata
	wire  [31:0] mm_interconnect_0_sysid_qsys_0_control_slave_readdata;        // sysid_qsys_0:readdata -> mm_interconnect_0:sysid_qsys_0_control_slave_readdata
	wire   [0:0] mm_interconnect_0_sysid_qsys_0_control_slave_address;         // mm_interconnect_0:sysid_qsys_0_control_slave_address -> sysid_qsys_0:address
	wire         mm_interconnect_0_oc_mem_s1_chipselect;                       // mm_interconnect_0:oc_mem_s1_chipselect -> oc_mem:chipselect
	wire  [31:0] mm_interconnect_0_oc_mem_s1_readdata;                         // oc_mem:readdata -> mm_interconnect_0:oc_mem_s1_readdata
	wire  [12:0] mm_interconnect_0_oc_mem_s1_address;                          // mm_interconnect_0:oc_mem_s1_address -> oc_mem:address
	wire   [3:0] mm_interconnect_0_oc_mem_s1_byteenable;                       // mm_interconnect_0:oc_mem_s1_byteenable -> oc_mem:byteenable
	wire         mm_interconnect_0_oc_mem_s1_write;                            // mm_interconnect_0:oc_mem_s1_write -> oc_mem:write
	wire  [31:0] mm_interconnect_0_oc_mem_s1_writedata;                        // mm_interconnect_0:oc_mem_s1_writedata -> oc_mem:writedata
	wire         mm_interconnect_0_oc_mem_s1_clken;                            // mm_interconnect_0:oc_mem_s1_clken -> oc_mem:clken
	wire         mm_interconnect_0_lms_ctr_gpio_s1_chipselect;                 // mm_interconnect_0:lms_ctr_gpio_s1_chipselect -> lms_ctr_gpio:chipselect
	wire  [31:0] mm_interconnect_0_lms_ctr_gpio_s1_readdata;                   // lms_ctr_gpio:readdata -> mm_interconnect_0:lms_ctr_gpio_s1_readdata
	wire   [2:0] mm_interconnect_0_lms_ctr_gpio_s1_address;                    // mm_interconnect_0:lms_ctr_gpio_s1_address -> lms_ctr_gpio:address
	wire         mm_interconnect_0_lms_ctr_gpio_s1_write;                      // mm_interconnect_0:lms_ctr_gpio_s1_write -> lms_ctr_gpio:write_n
	wire  [31:0] mm_interconnect_0_lms_ctr_gpio_s1_writedata;                  // mm_interconnect_0:lms_ctr_gpio_s1_writedata -> lms_ctr_gpio:writedata
	wire         mm_interconnect_0_leds_s1_chipselect;                         // mm_interconnect_0:leds_s1_chipselect -> leds:chipselect
	wire  [31:0] mm_interconnect_0_leds_s1_readdata;                           // leds:readdata -> mm_interconnect_0:leds_s1_readdata
	wire   [1:0] mm_interconnect_0_leds_s1_address;                            // mm_interconnect_0:leds_s1_address -> leds:address
	wire         mm_interconnect_0_leds_s1_write;                              // mm_interconnect_0:leds_s1_write -> leds:write_n
	wire  [31:0] mm_interconnect_0_leds_s1_writedata;                          // mm_interconnect_0:leds_s1_writedata -> leds:writedata
	wire  [31:0] mm_interconnect_0_switch_s1_readdata;                         // switch:readdata -> mm_interconnect_0:switch_s1_readdata
	wire   [1:0] mm_interconnect_0_switch_s1_address;                          // mm_interconnect_0:switch_s1_address -> switch:address
	wire         mm_interconnect_0_controlled_reset_s1_chipselect;             // mm_interconnect_0:controlled_reset_s1_chipselect -> controlled_reset:chipselect
	wire  [31:0] mm_interconnect_0_controlled_reset_s1_readdata;               // controlled_reset:readdata -> mm_interconnect_0:controlled_reset_s1_readdata
	wire   [1:0] mm_interconnect_0_controlled_reset_s1_address;                // mm_interconnect_0:controlled_reset_s1_address -> controlled_reset:address
	wire         mm_interconnect_0_controlled_reset_s1_write;                  // mm_interconnect_0:controlled_reset_s1_write -> controlled_reset:write_n
	wire  [31:0] mm_interconnect_0_controlled_reset_s1_writedata;              // mm_interconnect_0:controlled_reset_s1_writedata -> controlled_reset:writedata
	wire         mm_interconnect_0_spi_1_dac_spi_control_port_chipselect;      // mm_interconnect_0:spi_1_DAC_spi_control_port_chipselect -> spi_1_DAC:spi_select
	wire  [15:0] mm_interconnect_0_spi_1_dac_spi_control_port_readdata;        // spi_1_DAC:data_to_cpu -> mm_interconnect_0:spi_1_DAC_spi_control_port_readdata
	wire   [2:0] mm_interconnect_0_spi_1_dac_spi_control_port_address;         // mm_interconnect_0:spi_1_DAC_spi_control_port_address -> spi_1_DAC:mem_addr
	wire         mm_interconnect_0_spi_1_dac_spi_control_port_read;            // mm_interconnect_0:spi_1_DAC_spi_control_port_read -> spi_1_DAC:read_n
	wire         mm_interconnect_0_spi_1_dac_spi_control_port_write;           // mm_interconnect_0:spi_1_DAC_spi_control_port_write -> spi_1_DAC:write_n
	wire  [15:0] mm_interconnect_0_spi_1_dac_spi_control_port_writedata;       // mm_interconnect_0:spi_1_DAC_spi_control_port_writedata -> spi_1_DAC:data_from_cpu
	wire         mm_interconnect_0_spi_lms_spi_control_port_chipselect;        // mm_interconnect_0:spi_lms_spi_control_port_chipselect -> spi_lms:spi_select
	wire  [15:0] mm_interconnect_0_spi_lms_spi_control_port_readdata;          // spi_lms:data_to_cpu -> mm_interconnect_0:spi_lms_spi_control_port_readdata
	wire   [2:0] mm_interconnect_0_spi_lms_spi_control_port_address;           // mm_interconnect_0:spi_lms_spi_control_port_address -> spi_lms:mem_addr
	wire         mm_interconnect_0_spi_lms_spi_control_port_read;              // mm_interconnect_0:spi_lms_spi_control_port_read -> spi_lms:read_n
	wire         mm_interconnect_0_spi_lms_spi_control_port_write;             // mm_interconnect_0:spi_lms_spi_control_port_write -> spi_lms:write_n
	wire  [15:0] mm_interconnect_0_spi_lms_spi_control_port_writedata;         // mm_interconnect_0:spi_lms_spi_control_port_writedata -> spi_lms:data_from_cpu
	wire         rst_controller_reset_out_reset;                               // rst_controller:reset_out -> [Av_FIFO_Int_0:rsi_nrst, controlled_reset:reset_n, i2c_opencores_0:wb_rst_i, leds:reset_n, lms_ctr_gpio:reset_n, mm_interconnect_0:vectorblox_orca_0_reset_reset_bridge_in_reset_reset, oc_mem:reset, rst_translator:in_reset, spi_1_DAC:reset_n, spi_lms:reset_n, switch:reset_n, sysid_qsys_0:reset_n, vectorblox_orca_0:reset]
	wire         rst_controller_reset_out_reset_req;                           // rst_controller:reset_req -> [oc_mem:reset_req, rst_translator:reset_req_in]

	avfifo #(
		.width (32)
	) av_fifo_int_0 (
		.clk            (clk_clk),                                                   //          clock.clk
		.address        (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_address),    // avalon_slave_0.address
		.chipselect     (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_chipselect), //               .chipselect
		.write          (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_write),      //               .write
		.writedata      (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_writedata),  //               .writedata
		.read           (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_read),       //               .read
		.readdata       (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_readdata),   //               .readdata
		.rsi_nrst       (~rst_controller_reset_out_reset),                           //          reset.reset_n
		.coe_if_d       (exfifo_if_d_export),                                        //       cnd_if_d.export
		.coe_if_rd      (exfifo_if_rd_export),                                       //      cnd_if_rd.export
		.coe_of_wrfull  (exfifo_of_wrfull_export),                                   //  cnd_of_wrfull.export
		.coe_of_wr      (exfifo_of_wr_export),                                       //      cnd_of_wr.export
		.coe_of_d       (exfifo_of_d_export),                                        //       cnd_of_d.export
		.coe_if_rdempty (exfifo_if_rdempty_export),                                  // cnd_if_rdempty.export
		.coe_fifo_rst   (exfifo_rst_export)                                          //   cnd_fifo_rst.export
	);

	lms_orca_controlled_reset controlled_reset (
		.clk        (clk_clk),                                          //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),                  //               reset.reset_n
		.address    (mm_interconnect_0_controlled_reset_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_controlled_reset_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_controlled_reset_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_controlled_reset_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_controlled_reset_s1_readdata),   //                    .readdata
		.out_port   (controlled_reset_external_connection_export)       // external_connection.export
	);

	i2c_opencores i2c_opencores_0 (
		.wb_clk_i   (clk_clk),                                                      //            clock.clk
		.wb_rst_i   (rst_controller_reset_out_reset),                               //      clock_reset.reset
		.scl_pad_io (scl_exp_export),                                               //       export_scl.export
		.sda_pad_io (sda_exp_export),                                               //       export_sda.export
		.wb_adr_i   (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_address),     //   avalon_slave_0.address
		.wb_dat_i   (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_writedata),   //                 .writedata
		.wb_dat_o   (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_readdata),    //                 .readdata
		.wb_we_i    (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_write),       //                 .write
		.wb_stb_i   (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_chipselect),  //                 .chipselect
		.wb_ack_o   (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_waitrequest), //                 .waitrequest_n
		.wb_inta_o  (i2c_opencores_0_interrupt_sender_irq)                          // interrupt_sender.irq
	);

	lms_orca_leds leds (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_leds_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_leds_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_leds_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_leds_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_leds_s1_readdata),   //                    .readdata
		.out_port   (leds_external_connection_export)       // external_connection.export
	);

	lms_orca_lms_ctr_gpio lms_ctr_gpio (
		.clk        (clk_clk),                                      //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),              //               reset.reset_n
		.address    (mm_interconnect_0_lms_ctr_gpio_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_lms_ctr_gpio_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_lms_ctr_gpio_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_lms_ctr_gpio_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_lms_ctr_gpio_s1_readdata),   //                    .readdata
		.out_port   (lms_ctr_gpio_external_connection_export)       // external_connection.export
	);

	lms_orca_oc_mem oc_mem (
		.clk        (clk_clk),                                //   clk1.clk
		.address    (mm_interconnect_0_oc_mem_s1_address),    //     s1.address
		.clken      (mm_interconnect_0_oc_mem_s1_clken),      //       .clken
		.chipselect (mm_interconnect_0_oc_mem_s1_chipselect), //       .chipselect
		.write      (mm_interconnect_0_oc_mem_s1_write),      //       .write
		.readdata   (mm_interconnect_0_oc_mem_s1_readdata),   //       .readdata
		.writedata  (mm_interconnect_0_oc_mem_s1_writedata),  //       .writedata
		.byteenable (mm_interconnect_0_oc_mem_s1_byteenable), //       .byteenable
		.reset      (rst_controller_reset_out_reset),         // reset1.reset
		.reset_req  (rst_controller_reset_out_reset_req)      //       .reset_req
	);

	lms_orca_spi_1_DAC spi_1_dac (
		.clk           (clk_clk),                                                 //              clk.clk
		.reset_n       (~rst_controller_reset_out_reset),                         //            reset.reset_n
		.data_from_cpu (mm_interconnect_0_spi_1_dac_spi_control_port_writedata),  // spi_control_port.writedata
		.data_to_cpu   (mm_interconnect_0_spi_1_dac_spi_control_port_readdata),   //                 .readdata
		.mem_addr      (mm_interconnect_0_spi_1_dac_spi_control_port_address),    //                 .address
		.read_n        (~mm_interconnect_0_spi_1_dac_spi_control_port_read),      //                 .read_n
		.spi_select    (mm_interconnect_0_spi_1_dac_spi_control_port_chipselect), //                 .chipselect
		.write_n       (~mm_interconnect_0_spi_1_dac_spi_control_port_write),     //                 .write_n
		.irq           (spi_1_dac_irq_irq),                                       //              irq.irq
		.MISO          (spi_1_dac_external_MISO),                                 //         external.export
		.MOSI          (spi_1_dac_external_MOSI),                                 //                 .export
		.SCLK          (spi_1_dac_external_SCLK),                                 //                 .export
		.SS_n          (spi_1_dac_external_SS_n)                                  //                 .export
	);

	lms_orca_spi_lms spi_lms (
		.clk           (clk_clk),                                               //              clk.clk
		.reset_n       (~rst_controller_reset_out_reset),                       //            reset.reset_n
		.data_from_cpu (mm_interconnect_0_spi_lms_spi_control_port_writedata),  // spi_control_port.writedata
		.data_to_cpu   (mm_interconnect_0_spi_lms_spi_control_port_readdata),   //                 .readdata
		.mem_addr      (mm_interconnect_0_spi_lms_spi_control_port_address),    //                 .address
		.read_n        (~mm_interconnect_0_spi_lms_spi_control_port_read),      //                 .read_n
		.spi_select    (mm_interconnect_0_spi_lms_spi_control_port_chipselect), //                 .chipselect
		.write_n       (~mm_interconnect_0_spi_lms_spi_control_port_write),     //                 .write_n
		.irq           (spi_lms_irq_irq),                                       //              irq.irq
		.MISO          (spi_lms_external_MISO),                                 //         external.export
		.MOSI          (spi_lms_external_MOSI),                                 //                 .export
		.SCLK          (spi_lms_external_SCLK),                                 //                 .export
		.SS_n          (spi_lms_external_SS_n)                                  //                 .export
	);

	lms_orca_switch switch (
		.clk      (clk_clk),                              //                 clk.clk
		.reset_n  (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address  (mm_interconnect_0_switch_s1_address),  //                  s1.address
		.readdata (mm_interconnect_0_switch_s1_readdata), //                    .readdata
		.in_port  (switch_external_connection_export)     // external_connection.export
	);

	lms_orca_sysid_qsys_0 sysid_qsys_0 (
		.clock    (clk_clk),                                               //           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                       //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_qsys_0_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_qsys_0_control_slave_address)   //              .address
	);

	Orca #(
		.REGISTER_SIZE         (32),
		.AVALON_ENABLE         (1),
		.AXI_ENABLE            (0),
		.LVE_ENABLE            (0),
		.SCRATCHPAD_SIZE       (1024),
		.RESET_VECTOR          (512),
		.MULTIPLY_ENABLE       (1),
		.DIVIDE_ENABLE         (0),
		.SHIFTER_MAX_CYCLES    (32),
		.ENABLE_EXCEPTIONS     (1),
		.NUM_EXT_INTERRUPTS    (1),
		.ENABLE_EXT_INTERRUPTS (1),
		.COUNTER_LENGTH        (64),
		.BRANCH_PREDICTORS     (1),
		.PIPELINE_STAGES       (4)
	) vectorblox_orca_0 (
		.clk                           (clk_clk),                                     //             clock.clk
		.scratchpad_clk                (clk_clk),                                     //    scratchpad_clk.clk
		.reset                         (rst_controller_reset_out_reset),              //             reset.reset
		.avm_data_address              (vectorblox_orca_0_data_address),              //              data.address
		.avm_data_byteenable           (vectorblox_orca_0_data_byteenable),           //                  .byteenable
		.avm_data_read                 (vectorblox_orca_0_data_read),                 //                  .read
		.avm_data_readdata             (vectorblox_orca_0_data_readdata),             //                  .readdata
		.avm_data_write                (vectorblox_orca_0_data_write),                //                  .write
		.avm_data_writedata            (vectorblox_orca_0_data_writedata),            //                  .writedata
		.avm_data_waitrequest          (vectorblox_orca_0_data_waitrequest),          //                  .waitrequest
		.avm_data_readdatavalid        (vectorblox_orca_0_data_readdatavalid),        //                  .readdatavalid
		.data_ARADDR                   (),                                            //   axi_data_master.araddr
		.data_ARBURST                  (),                                            //                  .arburst
		.data_ARCACHE                  (),                                            //                  .arcache
		.data_ARID                     (),                                            //                  .arid
		.data_ARLEN                    (),                                            //                  .arlen
		.data_ARLOCK                   (),                                            //                  .arlock
		.data_ARPROT                   (),                                            //                  .arprot
		.data_ARREADY                  (),                                            //                  .arready
		.data_ARSIZE                   (),                                            //                  .arsize
		.data_ARVALID                  (),                                            //                  .arvalid
		.data_AWADDR                   (),                                            //                  .awaddr
		.data_AWBURST                  (),                                            //                  .awburst
		.data_AWCACHE                  (),                                            //                  .awcache
		.data_AWID                     (),                                            //                  .awid
		.data_AWLEN                    (),                                            //                  .awlen
		.data_AWLOCK                   (),                                            //                  .awlock
		.data_AWPROT                   (),                                            //                  .awprot
		.data_AWREADY                  (),                                            //                  .awready
		.data_AWSIZE                   (),                                            //                  .awsize
		.data_AWVALID                  (),                                            //                  .awvalid
		.data_BID                      (),                                            //                  .bid
		.data_BREADY                   (),                                            //                  .bready
		.data_BRESP                    (),                                            //                  .bresp
		.data_BVALID                   (),                                            //                  .bvalid
		.data_RDATA                    (),                                            //                  .rdata
		.data_RID                      (),                                            //                  .rid
		.data_RLAST                    (),                                            //                  .rlast
		.data_RREADY                   (),                                            //                  .rready
		.data_RRESP                    (),                                            //                  .rresp
		.data_RVALID                   (),                                            //                  .rvalid
		.data_WDATA                    (),                                            //                  .wdata
		.data_WID                      (),                                            //                  .wid
		.data_WLAST                    (),                                            //                  .wlast
		.data_WREADY                   (),                                            //                  .wready
		.data_WSTRB                    (),                                            //                  .wstrb
		.data_WVALID                   (),                                            //                  .wvalid
		.instr_ARADDR                  (),                                            //  axi_instr_master.araddr
		.instr_ARBURST                 (),                                            //                  .arburst
		.instr_ARCACHE                 (),                                            //                  .arcache
		.instr_ARID                    (),                                            //                  .arid
		.instr_ARLEN                   (),                                            //                  .arlen
		.instr_ARLOCK                  (),                                            //                  .arlock
		.instr_ARPROT                  (),                                            //                  .arprot
		.instr_ARREADY                 (),                                            //                  .arready
		.instr_ARSIZE                  (),                                            //                  .arsize
		.instr_ARVALID                 (),                                            //                  .arvalid
		.instr_AWADDR                  (),                                            //                  .awaddr
		.instr_AWBURST                 (),                                            //                  .awburst
		.instr_AWCACHE                 (),                                            //                  .awcache
		.instr_AWID                    (),                                            //                  .awid
		.instr_AWLEN                   (),                                            //                  .awlen
		.instr_AWLOCK                  (),                                            //                  .awlock
		.instr_AWPROT                  (),                                            //                  .awprot
		.instr_AWREADY                 (),                                            //                  .awready
		.instr_AWSIZE                  (),                                            //                  .awsize
		.instr_AWVALID                 (),                                            //                  .awvalid
		.instr_BID                     (),                                            //                  .bid
		.instr_BREADY                  (),                                            //                  .bready
		.instr_BRESP                   (),                                            //                  .bresp
		.instr_BVALID                  (),                                            //                  .bvalid
		.instr_RDATA                   (),                                            //                  .rdata
		.instr_RID                     (),                                            //                  .rid
		.instr_RLAST                   (),                                            //                  .rlast
		.instr_RREADY                  (),                                            //                  .rready
		.instr_RRESP                   (),                                            //                  .rresp
		.instr_RVALID                  (),                                            //                  .rvalid
		.instr_WDATA                   (),                                            //                  .wdata
		.instr_WID                     (),                                            //                  .wid
		.instr_WLAST                   (),                                            //                  .wlast
		.instr_WREADY                  (),                                            //                  .wready
		.instr_WSTRB                   (),                                            //                  .wstrb
		.instr_WVALID                  (),                                            //                  .wvalid
		.avm_instruction_address       (vectorblox_orca_0_instruction_address),       //       instruction.address
		.avm_instruction_read          (vectorblox_orca_0_instruction_read),          //                  .read
		.avm_instruction_readdata      (vectorblox_orca_0_instruction_readdata),      //                  .readdata
		.avm_instruction_waitrequest   (vectorblox_orca_0_instruction_waitrequest),   //                  .waitrequest
		.avm_instruction_readdatavalid (vectorblox_orca_0_instruction_readdatavalid), //                  .readdatavalid
		.global_interrupts             (vectorblox_orca_0_global_interrupts_export),  // global_interrupts.export
		.data_ADR_O                    (),                                            //       (terminated)
		.data_DAT_I                    (32'b00000000000000000000000000000000),        //       (terminated)
		.data_DAT_O                    (),                                            //       (terminated)
		.data_WE_O                     (),                                            //       (terminated)
		.data_SEL_O                    (),                                            //       (terminated)
		.data_STB_O                    (),                                            //       (terminated)
		.data_ACK_I                    (1'b0),                                        //       (terminated)
		.data_CYC_O                    (),                                            //       (terminated)
		.data_CTI_O                    (),                                            //       (terminated)
		.data_STALL_I                  (1'b0),                                        //       (terminated)
		.instr_ADR_O                   (),                                            //       (terminated)
		.instr_DAT_I                   (32'b00000000000000000000000000000000),        //       (terminated)
		.instr_STB_O                   (),                                            //       (terminated)
		.instr_ACK_I                   (1'b0),                                        //       (terminated)
		.instr_CYC_O                   (),                                            //       (terminated)
		.instr_CTI_O                   (),                                            //       (terminated)
		.instr_STALL_I                 (1'b0)                                         //       (terminated)
	);

	lms_orca_mm_interconnect_0 mm_interconnect_0 (
		.clk_main_clk_clk                                    (clk_clk),                                                       //                                  clk_main_clk.clk
		.vectorblox_orca_0_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                // vectorblox_orca_0_reset_reset_bridge_in_reset.reset
		.vectorblox_orca_0_data_address                      (vectorblox_orca_0_data_address),                                //                        vectorblox_orca_0_data.address
		.vectorblox_orca_0_data_waitrequest                  (vectorblox_orca_0_data_waitrequest),                            //                                              .waitrequest
		.vectorblox_orca_0_data_byteenable                   (vectorblox_orca_0_data_byteenable),                             //                                              .byteenable
		.vectorblox_orca_0_data_read                         (vectorblox_orca_0_data_read),                                   //                                              .read
		.vectorblox_orca_0_data_readdata                     (vectorblox_orca_0_data_readdata),                               //                                              .readdata
		.vectorblox_orca_0_data_readdatavalid                (vectorblox_orca_0_data_readdatavalid),                          //                                              .readdatavalid
		.vectorblox_orca_0_data_write                        (vectorblox_orca_0_data_write),                                  //                                              .write
		.vectorblox_orca_0_data_writedata                    (vectorblox_orca_0_data_writedata),                              //                                              .writedata
		.vectorblox_orca_0_instruction_address               (vectorblox_orca_0_instruction_address),                         //                 vectorblox_orca_0_instruction.address
		.vectorblox_orca_0_instruction_waitrequest           (vectorblox_orca_0_instruction_waitrequest),                     //                                              .waitrequest
		.vectorblox_orca_0_instruction_read                  (vectorblox_orca_0_instruction_read),                            //                                              .read
		.vectorblox_orca_0_instruction_readdata              (vectorblox_orca_0_instruction_readdata),                        //                                              .readdata
		.vectorblox_orca_0_instruction_readdatavalid         (vectorblox_orca_0_instruction_readdatavalid),                   //                                              .readdatavalid
		.Av_FIFO_Int_0_avalon_slave_0_address                (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_address),        //                  Av_FIFO_Int_0_avalon_slave_0.address
		.Av_FIFO_Int_0_avalon_slave_0_write                  (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_write),          //                                              .write
		.Av_FIFO_Int_0_avalon_slave_0_read                   (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_read),           //                                              .read
		.Av_FIFO_Int_0_avalon_slave_0_readdata               (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_readdata),       //                                              .readdata
		.Av_FIFO_Int_0_avalon_slave_0_writedata              (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_writedata),      //                                              .writedata
		.Av_FIFO_Int_0_avalon_slave_0_chipselect             (mm_interconnect_0_av_fifo_int_0_avalon_slave_0_chipselect),     //                                              .chipselect
		.controlled_reset_s1_address                         (mm_interconnect_0_controlled_reset_s1_address),                 //                           controlled_reset_s1.address
		.controlled_reset_s1_write                           (mm_interconnect_0_controlled_reset_s1_write),                   //                                              .write
		.controlled_reset_s1_readdata                        (mm_interconnect_0_controlled_reset_s1_readdata),                //                                              .readdata
		.controlled_reset_s1_writedata                       (mm_interconnect_0_controlled_reset_s1_writedata),               //                                              .writedata
		.controlled_reset_s1_chipselect                      (mm_interconnect_0_controlled_reset_s1_chipselect),              //                                              .chipselect
		.i2c_opencores_0_avalon_slave_0_address              (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_address),      //                i2c_opencores_0_avalon_slave_0.address
		.i2c_opencores_0_avalon_slave_0_write                (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_write),        //                                              .write
		.i2c_opencores_0_avalon_slave_0_readdata             (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_readdata),     //                                              .readdata
		.i2c_opencores_0_avalon_slave_0_writedata            (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_writedata),    //                                              .writedata
		.i2c_opencores_0_avalon_slave_0_waitrequest          (~mm_interconnect_0_i2c_opencores_0_avalon_slave_0_waitrequest), //                                              .waitrequest
		.i2c_opencores_0_avalon_slave_0_chipselect           (mm_interconnect_0_i2c_opencores_0_avalon_slave_0_chipselect),   //                                              .chipselect
		.leds_s1_address                                     (mm_interconnect_0_leds_s1_address),                             //                                       leds_s1.address
		.leds_s1_write                                       (mm_interconnect_0_leds_s1_write),                               //                                              .write
		.leds_s1_readdata                                    (mm_interconnect_0_leds_s1_readdata),                            //                                              .readdata
		.leds_s1_writedata                                   (mm_interconnect_0_leds_s1_writedata),                           //                                              .writedata
		.leds_s1_chipselect                                  (mm_interconnect_0_leds_s1_chipselect),                          //                                              .chipselect
		.lms_ctr_gpio_s1_address                             (mm_interconnect_0_lms_ctr_gpio_s1_address),                     //                               lms_ctr_gpio_s1.address
		.lms_ctr_gpio_s1_write                               (mm_interconnect_0_lms_ctr_gpio_s1_write),                       //                                              .write
		.lms_ctr_gpio_s1_readdata                            (mm_interconnect_0_lms_ctr_gpio_s1_readdata),                    //                                              .readdata
		.lms_ctr_gpio_s1_writedata                           (mm_interconnect_0_lms_ctr_gpio_s1_writedata),                   //                                              .writedata
		.lms_ctr_gpio_s1_chipselect                          (mm_interconnect_0_lms_ctr_gpio_s1_chipselect),                  //                                              .chipselect
		.oc_mem_s1_address                                   (mm_interconnect_0_oc_mem_s1_address),                           //                                     oc_mem_s1.address
		.oc_mem_s1_write                                     (mm_interconnect_0_oc_mem_s1_write),                             //                                              .write
		.oc_mem_s1_readdata                                  (mm_interconnect_0_oc_mem_s1_readdata),                          //                                              .readdata
		.oc_mem_s1_writedata                                 (mm_interconnect_0_oc_mem_s1_writedata),                         //                                              .writedata
		.oc_mem_s1_byteenable                                (mm_interconnect_0_oc_mem_s1_byteenable),                        //                                              .byteenable
		.oc_mem_s1_chipselect                                (mm_interconnect_0_oc_mem_s1_chipselect),                        //                                              .chipselect
		.oc_mem_s1_clken                                     (mm_interconnect_0_oc_mem_s1_clken),                             //                                              .clken
		.spi_1_DAC_spi_control_port_address                  (mm_interconnect_0_spi_1_dac_spi_control_port_address),          //                    spi_1_DAC_spi_control_port.address
		.spi_1_DAC_spi_control_port_write                    (mm_interconnect_0_spi_1_dac_spi_control_port_write),            //                                              .write
		.spi_1_DAC_spi_control_port_read                     (mm_interconnect_0_spi_1_dac_spi_control_port_read),             //                                              .read
		.spi_1_DAC_spi_control_port_readdata                 (mm_interconnect_0_spi_1_dac_spi_control_port_readdata),         //                                              .readdata
		.spi_1_DAC_spi_control_port_writedata                (mm_interconnect_0_spi_1_dac_spi_control_port_writedata),        //                                              .writedata
		.spi_1_DAC_spi_control_port_chipselect               (mm_interconnect_0_spi_1_dac_spi_control_port_chipselect),       //                                              .chipselect
		.spi_lms_spi_control_port_address                    (mm_interconnect_0_spi_lms_spi_control_port_address),            //                      spi_lms_spi_control_port.address
		.spi_lms_spi_control_port_write                      (mm_interconnect_0_spi_lms_spi_control_port_write),              //                                              .write
		.spi_lms_spi_control_port_read                       (mm_interconnect_0_spi_lms_spi_control_port_read),               //                                              .read
		.spi_lms_spi_control_port_readdata                   (mm_interconnect_0_spi_lms_spi_control_port_readdata),           //                                              .readdata
		.spi_lms_spi_control_port_writedata                  (mm_interconnect_0_spi_lms_spi_control_port_writedata),          //                                              .writedata
		.spi_lms_spi_control_port_chipselect                 (mm_interconnect_0_spi_lms_spi_control_port_chipselect),         //                                              .chipselect
		.switch_s1_address                                   (mm_interconnect_0_switch_s1_address),                           //                                     switch_s1.address
		.switch_s1_readdata                                  (mm_interconnect_0_switch_s1_readdata),                          //                                              .readdata
		.sysid_qsys_0_control_slave_address                  (mm_interconnect_0_sysid_qsys_0_control_slave_address),          //                    sysid_qsys_0_control_slave.address
		.sysid_qsys_0_control_slave_readdata                 (mm_interconnect_0_sysid_qsys_0_control_slave_readdata)          //                                              .readdata
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~in_reset_reset_n),                  // reset_in0.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
